karo_document :== (class_definition | enum_definition)? | parser_instruction*
class_definition :== attribute* namespace name '{' class_definition_content '}'
enum_definition :== attribute* '<-' namespace name '{' enum_definition_content '}'
namespace :== name ('.' name)* '::'
enum_definition_content :== name (',' name)* ','?
parser_instruction :== '#' parser_instruction_name (' ' parser_instruction_content)? ';'
parser_instruction_name :== [^; ]
parser_instruction_content :== [^;]
attribute :== '[' identifier (calling_parameter_list)? ']'
calling_parameter_list :== '(' ((statement_content) (',' statement_content)*)? ')'
class_definition_content :== (class_function_definition | class_property_definition | parser_instruction)*
class_function_definition :== attribute* function_definition
function_definition :== ('|' function_definition_parameter_list '|')? ':' identifier '{' function_definition_content '}'
function_definition_parameter_list :== ((name ':' ('<-')+ (identifier | '!')) (',' name ':' ('<-')+ identifier)*)?
function_definition_content :== instruction*
instruction :== (statement ';' | parser_instruction)
identifier :== namespace? (name | static_identifier) array_type_appendix?
value_identifier :== identifier (('.' name)? | (':' name)?)?
statement :== ('!!' number? | '!' statement_content | statement_content | new_variable_assignment_statement | pipe_statement)
statement_content :== (value_identifier | function_definition | calling_parameter_list | operator_symbol | string | array_access | number)*
array_access :== '[' statement_content ']'
string :== ('"' [^"]* '"')
operator_symbol :== [!^+-/*><()%&|%]
number :== [0-9]+
name :== (name_beginning - number) ([^:;,.?\/`~^'"<>{}[]()+*])*
name_beginning :== [^:;,.?\/`~^'"<>{}[]()+*-]
class_property_definition :== attribute* name ':' identifier (':=' statement_content) ';'
comment :== line_comment | block_comment
line_comment :== '//' (allowed_comment_chars - [^#0d#0a])* (#0d | #0a)
block_comment :== '/*' (allowed_comment_chars - '*/')* '*/'
allowed_comment_chars :== [^#00]
array_type_appendix :== '[]'
static_identifier :== name ':' name
new_variable_assignment_statement :== name ':' identifier ':=' statement_content
pipe_statement :== statement_content '->' (statement_content | pipe_statement)